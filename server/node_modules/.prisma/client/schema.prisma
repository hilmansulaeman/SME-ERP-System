// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  role      UserRole @default(USER)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  company   Company? @relation(fields: [companyId], references: [id])
  companyId String?

  // Audit trail
  createdBy String?
  updatedBy String?

  @@map("users")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  MANAGER
  USER
  ACCOUNTANT
  HR
}

// Company/Organization
model Company {
  id         String   @id @default(cuid())
  name       String
  legalName  String?
  taxId      String?
  address    String?
  city       String?
  state      String?
  country    String   @default("IN")
  postalCode String?
  phone      String?
  email      String?
  website    String?
  currency   String   @default("INR")
  timezone   String   @default("Asia/Kolkata")
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  users          User[]
  customers      Customer[]
  suppliers      Supplier[]
  products       Product[]
  categories     Category[]
  warehouses     Warehouse[]
  employees      Employee[]
  accounts       Account[]
  transactions   Transaction[]
  invoices       Invoice[]
  purchaseOrders PurchaseOrder[]
  payrolls       Payroll[]

  @@map("companies")
}

// Customer Management
model Customer {
  id         String   @id @default(cuid())
  name       String
  email      String?
  phone      String?
  address    String?
  city       String?
  state      String?
  country    String?
  postalCode String?
  gstNumber  String?
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  company      Company       @relation(fields: [companyId], references: [id])
  companyId    String
  invoices     Invoice[]
  transactions Transaction[]

  @@map("customers")
}

// Supplier Management
model Supplier {
  id         String   @id @default(cuid())
  name       String
  email      String?
  phone      String?
  address    String?
  city       String?
  state      String?
  country    String?
  postalCode String?
  gstNumber  String?
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  company        Company         @relation(fields: [companyId], references: [id])
  companyId      String
  purchaseOrders PurchaseOrder[]
  transactions   Transaction[]

  @@map("suppliers")
}

// Product Categories
model Category {
  id          String   @id @default(cuid())
  name        String
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  company   Company   @relation(fields: [companyId], references: [id])
  companyId String
  products  Product[]

  @@map("categories")
}

// Product/Inventory Management
model Product {
  id          String   @id @default(cuid())
  name        String
  sku         String   @unique
  description String?
  categoryId  String?
  unit        String   @default("PCS")
  price       Decimal  @db.Decimal(10, 2)
  costPrice   Decimal  @db.Decimal(10, 2)
  gstRate     Decimal  @default(18.00) @db.Decimal(5, 2)
  minStock    Int      @default(0)
  maxStock    Int?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  company            Company             @relation(fields: [companyId], references: [id])
  companyId          String
  category           Category?           @relation(fields: [categoryId], references: [id])
  stocks             Stock[]
  invoiceItems       InvoiceItem[]
  purchaseOrderItems PurchaseOrderItem[]

  @@map("products")
}

// Warehouse Management
model Warehouse {
  id        String   @id @default(cuid())
  name      String
  address   String?
  city      String?
  state     String?
  country   String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  company   Company @relation(fields: [companyId], references: [id])
  companyId String
  stocks    Stock[]

  @@map("warehouses")
}

// Stock Management
model Stock {
  id        String   @id @default(cuid())
  quantity  Int      @default(0)
  reserved  Int      @default(0)
  available Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  product     Product   @relation(fields: [productId], references: [id])
  productId   String
  warehouse   Warehouse @relation(fields: [warehouseId], references: [id])
  warehouseId String

  @@unique([productId, warehouseId])
  @@map("stocks")
}

// Chart of Accounts
model Account {
  id        String      @id @default(cuid())
  code      String
  name      String
  type      AccountType
  parentId  String?
  isActive  Boolean     @default(true)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  // Relations
  company      Company       @relation(fields: [companyId], references: [id])
  companyId    String
  parent       Account?      @relation("AccountHierarchy", fields: [parentId], references: [id])
  children     Account[]     @relation("AccountHierarchy")
  transactions Transaction[]

  @@unique([companyId, code])
  @@map("accounts")
}

enum AccountType {
  ASSET
  LIABILITY
  EQUITY
  REVENUE
  EXPENSE
}

// Transactions (Journal Entries)
model Transaction {
  id          String            @id @default(cuid())
  date        DateTime
  reference   String?
  description String
  amount      Decimal           @db.Decimal(12, 2)
  type        TransactionType
  status      TransactionStatus @default(PENDING)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  // Relations
  company    Company   @relation(fields: [companyId], references: [id])
  companyId  String
  account    Account   @relation(fields: [accountId], references: [id])
  accountId  String
  customer   Customer? @relation(fields: [customerId], references: [id])
  customerId String?
  supplier   Supplier? @relation(fields: [supplierId], references: [id])
  supplierId String?

  @@map("transactions")
}

enum TransactionType {
  DEBIT
  CREDIT
}

enum TransactionStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

// Invoice Management
model Invoice {
  id            String        @id @default(cuid())
  invoiceNumber String        @unique
  date          DateTime
  dueDate       DateTime?
  customerId    String
  subtotal      Decimal       @db.Decimal(12, 2)
  taxAmount     Decimal       @db.Decimal(12, 2)
  discount      Decimal       @default(0) @db.Decimal(12, 2)
  total         Decimal       @db.Decimal(12, 2)
  status        InvoiceStatus @default(DRAFT)
  notes         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  company   Company       @relation(fields: [companyId], references: [id])
  companyId String
  customer  Customer      @relation(fields: [customerId], references: [id])
  items     InvoiceItem[]

  @@map("invoices")
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  OVERDUE
  CANCELLED
}

model InvoiceItem {
  id        String   @id @default(cuid())
  quantity  Int
  unitPrice Decimal  @db.Decimal(10, 2)
  taxRate   Decimal  @db.Decimal(5, 2)
  taxAmount Decimal  @db.Decimal(10, 2)
  discount  Decimal  @default(0) @db.Decimal(10, 2)
  total     Decimal  @db.Decimal(10, 2)
  createdAt DateTime @default(now())

  // Relations
  invoice   Invoice @relation(fields: [invoiceId], references: [id])
  invoiceId String
  product   Product @relation(fields: [productId], references: [id])
  productId String

  @@map("invoice_items")
}

// Purchase Order Management
model PurchaseOrder {
  id           String              @id @default(cuid())
  poNumber     String              @unique
  date         DateTime
  expectedDate DateTime?
  supplierId   String
  subtotal     Decimal             @db.Decimal(12, 2)
  taxAmount    Decimal             @db.Decimal(12, 2)
  total        Decimal             @db.Decimal(12, 2)
  status       PurchaseOrderStatus @default(DRAFT)
  notes        String?
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt

  // Relations
  company   Company             @relation(fields: [companyId], references: [id])
  companyId String
  supplier  Supplier            @relation(fields: [supplierId], references: [id])
  items     PurchaseOrderItem[]

  @@map("purchase_orders")
}

enum PurchaseOrderStatus {
  DRAFT
  SENT
  CONFIRMED
  RECEIVED
  CANCELLED
}

model PurchaseOrderItem {
  id        String   @id @default(cuid())
  quantity  Int
  unitPrice Decimal  @db.Decimal(10, 2)
  taxRate   Decimal  @db.Decimal(5, 2)
  taxAmount Decimal  @db.Decimal(10, 2)
  total     Decimal  @db.Decimal(10, 2)
  createdAt DateTime @default(now())

  // Relations
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId String
  product         Product       @relation(fields: [productId], references: [id])
  productId       String

  @@map("purchase_order_items")
}

// Employee Management
model Employee {
  id            String    @id @default(cuid())
  employeeId    String    @unique
  firstName     String
  lastName      String
  email         String    @unique
  phone         String?
  address       String?
  city          String?
  state         String?
  country       String?
  postalCode    String?
  dateOfBirth   DateTime?
  dateOfJoining DateTime
  department    String?
  designation   String?
  salary        Decimal   @db.Decimal(10, 2)
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  company   Company   @relation(fields: [companyId], references: [id])
  companyId String
  payrolls  Payroll[]

  @@map("employees")
}

// Payroll Management
model Payroll {
  id          String        @id @default(cuid())
  month       Int
  year        Int
  basicSalary Decimal       @db.Decimal(10, 2)
  allowances  Decimal       @default(0) @db.Decimal(10, 2)
  deductions  Decimal       @default(0) @db.Decimal(10, 2)
  netSalary   Decimal       @db.Decimal(10, 2)
  status      PayrollStatus @default(PENDING)
  paidDate    DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  company    Company  @relation(fields: [companyId], references: [id])
  companyId  String
  employee   Employee @relation(fields: [employeeId], references: [id])
  employeeId String

  @@unique([employeeId, month, year])
  @@map("payrolls")
}

enum PayrollStatus {
  PENDING
  PROCESSED
  PAID
  CANCELLED
}
