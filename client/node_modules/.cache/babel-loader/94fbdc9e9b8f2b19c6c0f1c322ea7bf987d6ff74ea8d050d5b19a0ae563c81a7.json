{"ast":null,"code":"export const formatCurrency = (amount, currency = 'INR') => {\n  return new Intl.NumberFormat('en-IN', {\n    style: 'currency',\n    currency: currency,\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2\n  }).format(amount);\n};\nexport const formatDate = date => {\n  return new Date(date).toLocaleDateString('en-IN', {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric'\n  });\n};\nexport const formatDateTime = date => {\n  return new Date(date).toLocaleString('en-IN', {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric',\n    hour: '2-digit',\n    minute: '2-digit'\n  });\n};\nexport const formatPhoneNumber = phone => {\n  // Remove all non-digit characters\n  const cleaned = phone.replace(/\\D/g, '');\n\n  // Format as Indian phone number\n  if (cleaned.length === 10) {\n    return `+91 ${cleaned.slice(0, 5)} ${cleaned.slice(5)}`;\n  }\n  return phone;\n};\nexport const formatGSTNumber = gst => {\n  // Format GST number as XX XXXX XXXX X XXX\n  const cleaned = gst.replace(/\\D/g, '');\n  if (cleaned.length === 15) {\n    return `${cleaned.slice(0, 2)} ${cleaned.slice(2, 6)} ${cleaned.slice(6, 10)} ${cleaned.slice(10, 13)} ${cleaned.slice(13)}`;\n  }\n  return gst;\n};\nexport const formatPercentage = value => {\n  return `${value.toFixed(2)}%`;\n};\nexport const formatNumber = value => {\n  return new Intl.NumberFormat('en-IN').format(value);\n};\nexport const truncateText = (text, maxLength) => {\n  if (text.length <= maxLength) return text;\n  return text.slice(0, maxLength) + '...';\n};\nexport const capitalizeFirst = text => {\n  return text.charAt(0).toUpperCase() + text.slice(1).toLowerCase();\n};\nexport const getStatusColor = status => {\n  switch (status.toLowerCase()) {\n    case 'active':\n    case 'paid':\n    case 'approved':\n    case 'completed':\n      return 'success';\n    case 'pending':\n    case 'draft':\n      return 'warning';\n    case 'inactive':\n    case 'cancelled':\n    case 'rejected':\n      return 'error';\n    default:\n      return 'info';\n  }\n};","map":{"version":3,"names":["formatCurrency","amount","currency","Intl","NumberFormat","style","minimumFractionDigits","maximumFractionDigits","format","formatDate","date","Date","toLocaleDateString","year","month","day","formatDateTime","toLocaleString","hour","minute","formatPhoneNumber","phone","cleaned","replace","length","slice","formatGSTNumber","gst","formatPercentage","value","toFixed","formatNumber","truncateText","text","maxLength","capitalizeFirst","charAt","toUpperCase","toLowerCase","getStatusColor","status"],"sources":["/Users/verenmarcelina/sme-erp/client/src/utils/formatters.ts"],"sourcesContent":["export const formatCurrency = (amount: number, currency: string = 'INR'): string => {\n  return new Intl.NumberFormat('en-IN', {\n    style: 'currency',\n    currency: currency,\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2,\n  }).format(amount);\n};\n\nexport const formatDate = (date: string | Date): string => {\n  return new Date(date).toLocaleDateString('en-IN', {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric',\n  });\n};\n\nexport const formatDateTime = (date: string | Date): string => {\n  return new Date(date).toLocaleString('en-IN', {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric',\n    hour: '2-digit',\n    minute: '2-digit',\n  });\n};\n\nexport const formatPhoneNumber = (phone: string): string => {\n  // Remove all non-digit characters\n  const cleaned = phone.replace(/\\D/g, '');\n  \n  // Format as Indian phone number\n  if (cleaned.length === 10) {\n    return `+91 ${cleaned.slice(0, 5)} ${cleaned.slice(5)}`;\n  }\n  \n  return phone;\n};\n\nexport const formatGSTNumber = (gst: string): string => {\n  // Format GST number as XX XXXX XXXX X XXX\n  const cleaned = gst.replace(/\\D/g, '');\n  if (cleaned.length === 15) {\n    return `${cleaned.slice(0, 2)} ${cleaned.slice(2, 6)} ${cleaned.slice(6, 10)} ${cleaned.slice(10, 13)} ${cleaned.slice(13)}`;\n  }\n  return gst;\n};\n\nexport const formatPercentage = (value: number): string => {\n  return `${value.toFixed(2)}%`;\n};\n\nexport const formatNumber = (value: number): string => {\n  return new Intl.NumberFormat('en-IN').format(value);\n};\n\nexport const truncateText = (text: string, maxLength: number): string => {\n  if (text.length <= maxLength) return text;\n  return text.slice(0, maxLength) + '...';\n};\n\nexport const capitalizeFirst = (text: string): string => {\n  return text.charAt(0).toUpperCase() + text.slice(1).toLowerCase();\n};\n\nexport const getStatusColor = (status: string): string => {\n  switch (status.toLowerCase()) {\n    case 'active':\n    case 'paid':\n    case 'approved':\n    case 'completed':\n      return 'success';\n    case 'pending':\n    case 'draft':\n      return 'warning';\n    case 'inactive':\n    case 'cancelled':\n    case 'rejected':\n      return 'error';\n    default:\n      return 'info';\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}