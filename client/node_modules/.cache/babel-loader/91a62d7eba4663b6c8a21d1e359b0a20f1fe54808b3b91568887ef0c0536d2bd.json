{"ast":null,"code":"import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nexport const useAuthStore = create()(persist((set, get) => ({\n  user: null,\n  token: null,\n  isAuthenticated: false,\n  isLoading: false,\n  login: (user, token) => {\n    set({\n      user,\n      token,\n      isAuthenticated: true,\n      isLoading: false\n    });\n  },\n  logout: () => {\n    set({\n      user: null,\n      token: null,\n      isAuthenticated: false,\n      isLoading: false\n    });\n  },\n  setLoading: loading => {\n    set({\n      isLoading: loading\n    });\n  },\n  updateUser: userData => {\n    const currentUser = get().user;\n    if (currentUser) {\n      set({\n        user: {\n          ...currentUser,\n          ...userData\n        }\n      });\n    }\n  }\n}), {\n  name: 'auth-storage',\n  partialize: state => ({\n    user: state.user,\n    token: state.token,\n    isAuthenticated: state.isAuthenticated\n  })\n}));","map":{"version":3,"names":["create","persist","useAuthStore","set","get","user","token","isAuthenticated","isLoading","login","logout","setLoading","loading","updateUser","userData","currentUser","name","partialize","state"],"sources":["/Users/verenmarcelina/sme-erp/client/src/stores/authStore.ts"],"sourcesContent":["import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\n\ninterface User {\n  id: string;\n  email: string;\n  firstName: string;\n  lastName: string;\n  role: string;\n  company?: {\n    id: string;\n    name: string;\n    currency: string;\n  };\n}\n\ninterface AuthState {\n  user: User | null;\n  token: string | null;\n  isAuthenticated: boolean;\n  isLoading: boolean;\n  login: (user: User, token: string) => void;\n  logout: () => void;\n  setLoading: (loading: boolean) => void;\n  updateUser: (user: Partial<User>) => void;\n}\n\nexport const useAuthStore = create<AuthState>()(\n  persist(\n    (set, get) => ({\n      user: null,\n      token: null,\n      isAuthenticated: false,\n      isLoading: false,\n      \n      login: (user: User, token: string) => {\n        set({\n          user,\n          token,\n          isAuthenticated: true,\n          isLoading: false,\n        });\n      },\n      \n      logout: () => {\n        set({\n          user: null,\n          token: null,\n          isAuthenticated: false,\n          isLoading: false,\n        });\n      },\n      \n      setLoading: (loading: boolean) => {\n        set({ isLoading: loading });\n      },\n      \n      updateUser: (userData: Partial<User>) => {\n        const currentUser = get().user;\n        if (currentUser) {\n          set({\n            user: { ...currentUser, ...userData }\n          });\n        }\n      },\n    }),\n    {\n      name: 'auth-storage',\n      partialize: (state) => ({\n        user: state.user,\n        token: state.token,\n        isAuthenticated: state.isAuthenticated,\n      }),\n    }\n  )\n);\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,SAAS;AAChC,SAASC,OAAO,QAAQ,oBAAoB;AA0B5C,OAAO,MAAMC,YAAY,GAAGF,MAAM,CAAY,CAAC,CAC7CC,OAAO,CACL,CAACE,GAAG,EAAEC,GAAG,MAAM;EACbC,IAAI,EAAE,IAAI;EACVC,KAAK,EAAE,IAAI;EACXC,eAAe,EAAE,KAAK;EACtBC,SAAS,EAAE,KAAK;EAEhBC,KAAK,EAAEA,CAACJ,IAAU,EAAEC,KAAa,KAAK;IACpCH,GAAG,CAAC;MACFE,IAAI;MACJC,KAAK;MACLC,eAAe,EAAE,IAAI;MACrBC,SAAS,EAAE;IACb,CAAC,CAAC;EACJ,CAAC;EAEDE,MAAM,EAAEA,CAAA,KAAM;IACZP,GAAG,CAAC;MACFE,IAAI,EAAE,IAAI;MACVC,KAAK,EAAE,IAAI;MACXC,eAAe,EAAE,KAAK;MACtBC,SAAS,EAAE;IACb,CAAC,CAAC;EACJ,CAAC;EAEDG,UAAU,EAAGC,OAAgB,IAAK;IAChCT,GAAG,CAAC;MAAEK,SAAS,EAAEI;IAAQ,CAAC,CAAC;EAC7B,CAAC;EAEDC,UAAU,EAAGC,QAAuB,IAAK;IACvC,MAAMC,WAAW,GAAGX,GAAG,CAAC,CAAC,CAACC,IAAI;IAC9B,IAAIU,WAAW,EAAE;MACfZ,GAAG,CAAC;QACFE,IAAI,EAAE;UAAE,GAAGU,WAAW;UAAE,GAAGD;QAAS;MACtC,CAAC,CAAC;IACJ;EACF;AACF,CAAC,CAAC,EACF;EACEE,IAAI,EAAE,cAAc;EACpBC,UAAU,EAAGC,KAAK,KAAM;IACtBb,IAAI,EAAEa,KAAK,CAACb,IAAI;IAChBC,KAAK,EAAEY,KAAK,CAACZ,KAAK;IAClBC,eAAe,EAAEW,KAAK,CAACX;EACzB,CAAC;AACH,CACF,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}